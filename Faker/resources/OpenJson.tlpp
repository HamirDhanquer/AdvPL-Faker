#include "Totvs.ch"


/*/{Protheus.doc} OpenJson
    (Abrir os arquivos JSON passados para ele)
    @author Hamir Dhanquer
    @since 21/08/2024
    @version 1.0
/*/
Class OpenJson
    private data cFile as character
    private data cDsource as character

    public method New()
    public method ReadJson()
    private method ReadFile()
EndClass

/*/{Protheus.doc} New
    (long_description)
    @author Hamir Dhanquer
    @since 21/08/2024
    @version 1.0
    @param 
    @return 
/*/
Method New(cDatasource) Class OpenJson
    ::cDsource := cDatasource
    ::cFile := '\fkdir\json\'+ cDatasource +'.json'
Return Self 


/*/{Protheus.doc} ReadJson
    (long_description)
    @author Hamir Dhanquer
    @since 21/08/2024
    @version 1.0
/*/
Method ReadJson() Class OpenJson
    Local cJsonStr
    Local oJson
    Local oResult
    Local nId, cNome, cNomer

    // Le a string JSON do arquivo do disco 
    cJsonStr := ::ReadFile(::cFile)

    // Cria o objeto JSON e popula ele a partir da string
    oJson := JSonObject():New()
    cErr  := oJSon:fromJson(cJsonStr)

    If !empty(cErr)
    MsgStop(cErr,"JSON PARSE ERROR")
    Return
    Endif

    oResult := oJson:GetJSonObject(cDsource)
    FreeObj(oJson)
Return oResult


/*/{Protheus.doc} ReadFile
    (long_description)
    @author Hamir Dhanquer
    @since 21/08/2024
    @version 1.0
/*/
// TODO checar se existe o datasource.
Method ReadFile(cFile) Class OpenJson
    Local cBuffer := ''
    Local nH
    Local nTam

    nH := Fopen(cFile)
    IF nH != -1
        nTam := fSeek(nH,0,2)
        fSeek(nH,0)
        cBuffer := space(nTam)
        fRead(nH,@cBuffer,nTam)
        fClose(nH)
    Else
        MsgStop("Falha na abertura do arquivo ["+cFile+"]","FERROR "+cValToChar(Ferror()))
    Endif
Return cBuffer
